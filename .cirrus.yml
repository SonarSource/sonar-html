env:
  CIRRUS_VAULT_URL: https://vault.sonar.build:8200
  CIRRUS_VAULT_AUTH_PATH: jwt-cirrusci
  CIRRUS_VAULT_ROLE: cirrusci-${CIRRUS_REPO_OWNER}-${CIRRUS_REPO_NAME}

  CIRRUS_CLONE_DEPTH: 20
  ARTIFACTORY_URL: VAULT[development/kv/data/repox data.url]
  ARTIFACTORY_PRIVATE_USERNAME: vault-${CIRRUS_REPO_OWNER}-${CIRRUS_REPO_NAME}-private-reader
  ARTIFACTORY_PRIVATE_PASSWORD: VAULT[development/artifactory/token/${CIRRUS_REPO_OWNER}-${CIRRUS_REPO_NAME}-private-reader access_token]
  ARTIFACTORY_DEPLOY_USERNAME: vault-${CIRRUS_REPO_OWNER}-${CIRRUS_REPO_NAME}-qa-deployer
  ARTIFACTORY_DEPLOY_PASSWORD: VAULT[development/artifactory/token/${CIRRUS_REPO_OWNER}-${CIRRUS_REPO_NAME}-qa-deployer access_token]
  #Possible values for ARTIFACTORY_DEPLOY_REPO: sonarsource-private-qa, sonarsource-public-qa
  ARTIFACTORY_DEPLOY_REPO: sonarsource-public-qa
  ARTIFACTORY_ACCESS_TOKEN: VAULT[development/artifactory/token/${CIRRUS_REPO_OWNER}-${CIRRUS_REPO_NAME}-private-reader access_token]
  # Use bash (instead of sh on linux or cmd.exe on windows)
  CIRRUS_SHELL: bash

container_definition: &CONTAINER_DEFINITION
  eks_container:
    image: ${CIRRUS_AWS_ACCOUNT}.dkr.ecr.eu-central-1.amazonaws.com/base:j17-latest
    cluster_name: ${CIRRUS_CLUSTER_NAME}
    region: eu-central-1
    namespace: default
    cpu: 2
    memory: 2G

win_vm_definition: &WINDOWS_VM_DEFINITION
  ec2_instance:
    experimental: true # see https://github.com/cirruslabs/cirrus-ci-docs/issues/1051
    image: base-windows-jdk17-v*
    platform: windows
    region: eu-central-1
    type: t3.xlarge

only_sonarsource_qa: &ONLY_SONARSOURCE_QA
  only_if: $CIRRUS_USER_COLLABORATOR == 'true' && $CIRRUS_TAG == "" && ($CIRRUS_PR != "" || $CIRRUS_BRANCH == "master" || $CIRRUS_BRANCH =~ "branch-.*" || $CIRRUS_BRANCH =~ "dogfood-on-.*")

maven_cache_definition: &MAVEN_CACHE
  maven_cache:
    folder: ${CIRRUS_WORKING_DIR}/.m2/repository
    fingerprint_script: |
      if [ "$CIRRUS_OS" = "windows" ]; then
        powershell.exe -NoLogo -Command "Get-ChildItem -Path . -Filter "pom.xml" -Recurse -ErrorAction SilentlyContinue -Force | cat"
      fi
      if [ "$CIRRUS_OS" = "linux" ]; then
        find . -name pom.xml -exec cat {} \+
      fi

java_coverage_cache_definition: &JAVA_COVERAGE_CACHE
  java_coverage_cache:
    folder: ${CIRRUS_WORKING_DIR}/coverage/java
    fingerprint_script: echo "JAVA$(git rev-parse HEAD)"
    reupload_on_changes: 'true'

analyze_definition: &ANALYZE_DEFINITION
  <<: *CONTAINER_DEFINITION
  depends_on:
    - build
  <<: *MAVEN_CACHE
  <<: *JAVA_COVERAGE_CACHE
  analyze_script:
    - source cirrus-env BUILD
    - PULL_REQUEST_SHA=$GIT_SHA1 regular_mvn_build_deploy_analyze -P-deploy-sonarsource,-release,-sign -Dsonar.organization=sonarsource -Dsonar.projectKey="${SONAR_PROJECT_KEY}" -Dcommercial -Dmaven.shade.skip=true -Dmaven.install.skip=true -Dmaven.deploy.skip=true -DskipTests

build_task:
  <<: *CONTAINER_DEFINITION
  env:
    SIGN_KEY: VAULT[development/kv/data/sign data.key]
    PGP_PASSPHRASE: VAULT[development/kv/data/sign data.passphrase]
    # analysis on next
    SONAR_TOKEN: VAULT[development/kv/data/next data.token]
    SONAR_HOST_URL: https://next.sonarqube.com/sonarqube
    #allow deployment of pull request artifacts to repox
    DEPLOY_PULL_REQUEST: true
  maven_cache:
    folder: ${CIRRUS_WORKING_DIR}/.m2/repository
  build_script:
    - source cirrus-env BUILD
    - regular_mvn_build_deploy_analyze -Dsonar.skip=true -Pcoverage-report
  cleanup_before_cache_script: cleanup_maven_repository

analyze_next_task:
  <<: *ANALYZE_DEFINITION
  env:
    # analysis on next
    SONAR_TOKEN: VAULT[development/kv/data/next data.token]
    SONAR_HOST_URL: https://next.sonarqube.com/sonarqube
    SONAR_PROJECT_KEY: org.sonarsource.javascript:javascript

analyze_SQC_EU_shadow_task:
  <<: *ANALYZE_DEFINITION
  #only_if: $CIRRUS_CRON == "nightly"
  env:
    SONAR_TOKEN: VAULT[development/kv/data/sonarcloud data.token]
    SONAR_HOST_URL: https://sonarcloud.io
    SONAR_PROJECT_KEY: SonarSource_SonarJS

analyze_SQC_US_shadow_task:
  <<: *ANALYZE_DEFINITION
  #only_if: $CIRRUS_CRON == "nightly"
  env:
    SONAR_TOKEN: VAULT[development/kv/data/sonarqube-us data.token]
    SONAR_HOST_URL: https://sonarqube.us
    SONAR_PROJECT_KEY: SonarSource_SonarJS

run_iris_task:
  <<: *CONTAINER_DEFINITION
  #only_if: $CIRRUS_CRON == "nightly"
  depends_on:
    - analyze_SQC_EU_shadow
    - analyze_SQC_US_shadow
  env:
    SONAR_SOURCE_IRIS_TOKEN: VAULT[development/kv/data/iris data.next]
  matrix:
    - name: 'IRIS SQ NEXT -> Sonarcloud.io'
      env:
        SONAR_TARGET_URL: https://sonarcloud.io
        SONAR_TARGET_IRIS_TOKEN: VAULT[development/kv/data/iris data.sqc-eu]
    - name: 'IRIS SQ NEXT -> SonarQube.us'
      env:
        SONAR_TARGET_URL: https://sonarqube.us
        SONAR_TARGET_IRIS_TOKEN: VAULT[development/kv/data/iris data.sqc-us]
  script:
    - source .cirrus/run-iris.sh

ws_scan_task:
  <<: *CONTAINER_DEFINITION
  depends_on:
    - build
  # run only on master and long-term branches
  only_if: $CIRRUS_USER_COLLABORATOR == 'true' && ($CIRRUS_BRANCH == "master" || $CIRRUS_BRANCH =~ "branch-.*")
  env:
    WS_APIKEY: VAULT[development/kv/data/mend data.apikey]
  maven_cache:
    folder: ${CIRRUS_WORKING_DIR}/.m2/repository
  whitesource_script:
    - source cirrus-env QA
    - source set_maven_build_version $BUILD_NUMBER
    - mvn clean install -DskipTests
    - source ws_scan.sh
  allow_failures: "true"
  always:
    ws_artifacts:
      path: "whitesource/**/*"

build_win_task:
  depends_on:
    - build
  <<: *WINDOWS_VM_DEFINITION
  only_if: $CIRRUS_PR != "" || $CIRRUS_BRANCH == "master" || $CIRRUS_BRANCH =~ "branch-.*"
  maven_cache:
    #windows cache is buggy if using ${CIRRUS_WORKING_DIR}
    folder: ~/.m2/repository
  build_script:
    - source cirrus-env CI
    - mvn test
  cleanup_before_cache_script: cleanup_maven_repository

plugin_qa_task:
  depends_on:
    - build
  <<: *ONLY_SONARSOURCE_QA
  <<: *CONTAINER_DEFINITION
  eks_container:
    cpu: 3
    memory: 8G
  env:
    GITHUB_TOKEN: VAULT[development/github/token/licenses-ro token]
    matrix:
      - SQ_VERSION: LATEST_RELEASE
      - SQ_VERSION: DEV
  maven_cache:
    folder: ${CIRRUS_WORKING_DIR}/.m2/repository
  qa_script:
    - source cirrus-env QA
    - source set_maven_build_version $BUILD_NUMBER
    - cd its/plugin
    - mvn verify -Dsonar.runtimeVersion=${SQ_VERSION} -Dmaven.test.redirectTestOutputToFile=false -B -e -V
  cleanup_before_cache_script: cleanup_maven_repository

ruling_task:
  depends_on:
    - build
  <<: *ONLY_SONARSOURCE_QA
  <<: *CONTAINER_DEFINITION
  eks_container:
    cpu: 4
    memory: 8G
  env:
    GITHUB_TOKEN: VAULT[development/github/token/licenses-ro token]
  maven_cache:
    folder: ${CIRRUS_WORKING_DIR}/.m2/repository
  submodules_script:
    - git submodule update --init
  ruling_script:
    - source cirrus-env QA
    - source set_maven_build_version $BUILD_NUMBER
    - cd its/ruling
    - mvn verify -Dsonar.runtimeVersion=LATEST_RELEASE -Dmaven.test.redirectTestOutputToFile=false -B -e -V
  cleanup_before_cache_script: cleanup_maven_repository

promote_task:
  <<: *CONTAINER_DEFINITION
  eks_container:
    cpu: 0.5
    memory: 500M
  depends_on:
    - build
    - build_win
    - ws_scan
    - ruling
    - plugin_qa
  <<: *ONLY_SONARSOURCE_QA
  env:
    #see https://xtranet-sonarsource.atlassian.net/wiki/spaces/RE/pages/2931064959/Cirrus+CI+-+How+to+migrate+away+of+GCP+promote+function
    ARTIFACTORY_PROMOTE_ACCESS_TOKEN: VAULT[development/artifactory/token/${CIRRUS_REPO_OWNER}-${CIRRUS_REPO_NAME}-promoter access_token]
    GITHUB_TOKEN: VAULT[development/github/token/${CIRRUS_REPO_OWNER}-${CIRRUS_REPO_NAME}-promotion token]
  maven_cache:
    folder: ${CIRRUS_WORKING_DIR}/.m2/repository
  script: cirrus_promote_maven
  cleanup_before_cache_script: cleanup_maven_repository
