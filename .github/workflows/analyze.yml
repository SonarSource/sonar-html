name: Analyze
on:
  workflow_run:
    workflows: [Build]
    types: [completed]
    branches:
      - master
      - branch-*
      - dogfood-*
  schedule:
    # Nightly at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:

jobs:
  analyze_next:
    name: Analyze in SQ NEXT
    if: github.event_name == 'workflow_dispatch' || (github.event.workflow_run.conclusion == 'success' && github.event.workflow_run.event != 'merge_group')
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0
      - uses: jdx/mise-action@f8dfbcc150159126838e44b882bf34bd98fd90f3 # v2025.1.3
        with:
          version: 2025.1.3
      - uses: SonarSource/ci-github-actions/setup-orchestrator-maven-deps@v1
      - name: Restore coverage
        uses: actions/cache/restore@1bd1e32a3bdc45362d1e726936510720a7c30a57 # v4.2.0
        with:
          path: coverage/java
          key: java-coverage-${{ github.sha }}
      - name: Analyze with SonarQube Next
        env:
          SONAR_HOST_URL: https://next.sonarqube.com/sonarqube
          SONAR_PROJECT_KEY: org.sonarsource.html:html
        run: |
          mvn sonar:sonar \
            -Dsonar.organization=sonarsource \
            -Dsonar.projectKey="${SONAR_PROJECT_KEY}" \
            -Dcommercial \
            -Dmaven.shade.skip=true \
            -Dmaven.install.skip=true \
            -Dmaven.deploy.skip=true \
            -DskipTests \
            -B -e

  analyze_sonarcloud:
    name: Analyze in Sonarcloud.io
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0
      - uses: jdx/mise-action@f8dfbcc150159126838e44b882bf34bd98fd90f3 # v2025.1.3
        with:
          version: 2025.1.3
      - uses: SonarSource/ci-github-actions/setup-orchestrator-maven-deps@v1
      - name: Restore coverage
        uses: actions/cache/restore@1bd1e32a3bdc45362d1e726936510720a7c30a57 # v4.2.0
        with:
          path: coverage/java
          key: java-coverage-${{ github.sha }}
      - name: Analyze with SonarCloud
        env:
          SONAR_HOST_URL: https://sonarcloud.io
          SONAR_PROJECT_KEY: SonarSource_sonar-html
        run: |
          mvn sonar:sonar \
            -Dsonar.organization=sonarsource \
            -Dsonar.projectKey="${SONAR_PROJECT_KEY}" \
            -Dcommercial \
            -Dmaven.shade.skip=true \
            -Dmaven.install.skip=true \
            -Dmaven.deploy.skip=true \
            -DskipTests \
            -B -e

  analyze_sonarqube_us:
    name: Analyze in SonarQube.us
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0
      - uses: jdx/mise-action@f8dfbcc150159126838e44b882bf34bd98fd90f3 # v2025.1.3
        with:
          version: 2025.1.3
      - uses: SonarSource/ci-github-actions/setup-orchestrator-maven-deps@v1
      - name: Restore coverage
        uses: actions/cache/restore@1bd1e32a3bdc45362d1e726936510720a7c30a57 # v4.2.0
        with:
          path: coverage/java
          key: java-coverage-${{ github.sha }}
      - name: Analyze with SonarQube.us
        env:
          SONAR_HOST_URL: https://sonarqube.us
          SONAR_PROJECT_KEY: SonarSource_sonar-html
        run: |
          mvn sonar:sonar \
            -Dsonar.organization=sonarsource \
            -Dsonar.projectKey="${SONAR_PROJECT_KEY}" \
            -Dcommercial \
            -Dmaven.shade.skip=true \
            -Dmaven.install.skip=true \
            -Dmaven.deploy.skip=true \
            -DskipTests \
            -B -e

  run_iris:
    name: Run IRIS
    needs: [analyze_sonarcloud, analyze_sonarqube_us]
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    strategy:
      matrix:
        target:
          - name: 'IRIS SQ NEXT -> Sonarcloud.io'
            url: 'https://sonarcloud.io'
            vault_path: 'iris data.sqc-eu'
          - name: 'IRIS SQ NEXT -> SonarQube.us'
            url: 'https://sonarqube.us'
            vault_path: 'iris data.sqc-us'
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - uses: jdx/mise-action@f8dfbcc150159126838e44b882bf34bd98fd90f3 # v2025.1.3
        with:
          version: 2025.1.3
      - name: Download and Run IRIS
        env:
          SONAR_TARGET_URL: ${{ matrix.target.url }}
        run: |
          set -euo pipefail

          VERSION="[RELEASE]"

          # Download IRIS JAR
          HTTP_CODE=$(curl \
            --write-out '%{http_code}' \
            --location \
            --remote-name \
            --user "$ARTIFACTORY_PRIVATE_USERNAME:$ARTIFACTORY_ACCESS_TOKEN" \
            "$ARTIFACTORY_URL/sonarsource-private-releases/com/sonarsource/iris/iris/$VERSION/iris-$VERSION-jar-with-dependencies.jar")

          if [ "$HTTP_CODE" != "200" ]; then
            echo "Download $VERSION failed -> $HTTP_CODE"
            exit 1
          else
            echo "Downloaded $VERSION"
          fi

          # Function to run IRIS
          run_iris() {
            java \
              -Diris.source.projectKey="org.sonarsource.html:html" \
              -Diris.source.organization="sonarsource" \
              -Diris.source.url="https://next.sonarqube.com/sonarqube" \
              -Diris.source.token="$SONAR_SOURCE_IRIS_TOKEN" \
              -Diris.destination.projectKey="SonarSource_sonar-html" \
              -Diris.destination.organization="sonarsource" \
              -Diris.destination.url="$SONAR_TARGET_URL" \
              -Diris.destination.token="$SONAR_TARGET_IRIS_TOKEN" \
              -Diris.dryrun=$1 \
              -jar iris-[RELEASE]-jar-with-dependencies.jar
          }

          # Execute IRIS as dry-run first
          echo "===== Execute IRIS as dry-run"
          run_iris "true"
          STATUS=$?

          if [ $STATUS -ne 0 ]; then
            echo "===== Failed to run IRIS dry-run"
            exit 1
          else
            echo "===== Successful IRIS dry-run - executing IRIS for real."
            run_iris "false"
          fi
